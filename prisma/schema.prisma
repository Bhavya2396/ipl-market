// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  predictions   Prediction[]
  totalPoints   Int       @default(0)
  totalPredictions Int    @default(0)
  correctPredictions Int  @default(0)
  successRate   Float     @default(0)
  rank          Int?

  @@index([email])
  @@index([rank])
}

model Team {
  id            String       @id @default(cuid())
  name          String       @unique
  shortName     String       @unique
  logo          String?
  players       Player[]
  homeMatches   Match[]      @relation("HomeTeam")
  awayMatches   Match[]      @relation("AwayTeam")
  innings       Innings[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([name])
}

model Player {
  id            String       @id @default(cuid())
  name          String
  shortName     String
  role          PlayerRole
  isPlaying     Boolean      @default(true)
  team          Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId        String
  statistics    PlayerStats?
  performances  PlayerPerformance[]
  marketOptions MarketOption[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([teamId])
  @@index([name])
}

model PlayerStats {
  id            String       @id @default(cuid())
  playerId      String       @unique
  player        Player       @relation(fields: [playerId], references: [id], onDelete: Cascade)
  matches       Int          @default(0)
  runs          Int          @default(0)
  wickets       Int          @default(0)
  catches       Int          @default(0)
  stumpings     Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model PlayerPerformance {
  id            String       @id @default(cuid())
  playerId      String
  player        Player       @relation(fields: [playerId], references: [id], onDelete: Cascade)
  matchId       String
  match         Match        @relation(fields: [matchId], references: [id], onDelete: Cascade)
  runs          Int          @default(0)
  wickets       Int          @default(0)
  catches       Int          @default(0)
  stumpings     Int          @default(0)
  isHighestRunScorer Boolean @default(false)
  isHighestWicketTaker Boolean @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([playerId])
  @@index([matchId])
}

model Match {
  id            String       @id @default(cuid())
  date          DateTime
  status        MatchStatus  @default(UPCOMING)
  homeTeam      Team         @relation("HomeTeam", fields: [homeTeamId], references: [id], onDelete: Cascade)
  homeTeamId    String
  awayTeam      Team         @relation("AwayTeam", fields: [awayTeamId], references: [id], onDelete: Cascade)
  awayTeamId    String
  venue         String
  city          String
  details       MatchDetails?
  markets       Market[]
  predictions   Prediction[]
  performances  PlayerPerformance[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([date, homeTeamId, awayTeamId])
  @@index([date])
  @@index([status])
  @@index([homeTeamId])
  @@index([awayTeamId])
}

model MatchDetails {
  id            String       @id @default(cuid())
  matchId       String       @unique
  match         Match        @relation(fields: [matchId], references: [id], onDelete: Cascade)
  tossWinner    String?
  tossDecision  String?
  innings       Innings[]
  manOfTheMatch String?
  highestTeamScore Int?
  crossed200Runs Boolean?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Innings {
  id            String       @id @default(cuid())
  matchDetailsId String
  matchDetails   MatchDetails @relation(fields: [matchDetailsId], references: [id], onDelete: Cascade)
  teamId        String
  team          Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  inningsNumber Int          // 1 for first innings, 2 for second innings
  runs          Int          @default(0)
  wickets       Int          @default(0)
  overs         Float        @default(0)
  extras        Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([matchDetailsId])
  @@index([teamId])
  @@unique([matchDetailsId, inningsNumber])
}

model Market {
  id            String       @id @default(cuid())
  match         Match        @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId       String
  type          MarketType
  title         String
  description   String
  status        MarketStatus @default(ACTIVE)
  opensAt       DateTime     // Market opens at 12 AM IST on match day
  closesAt      DateTime     // Market closes 1 hour before match start
  options       MarketOption[]
  predictions   Prediction[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([matchId, type])
  @@index([matchId])
  @@index([status])
  @@index([opensAt])
  @@index([closesAt])
}

model MarketOption {
  id            String       @id @default(cuid())
  marketId      String
  market        Market       @relation(fields: [marketId], references: [id], onDelete: Cascade)
  label         String
  playerId      String?      // For player-specific options (run scorer, wicket taker)
  player        Player?      @relation(fields: [playerId], references: [id], onDelete: SetNull)
  predictions   Prediction[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([marketId])
  @@index([playerId])
}

model Prediction {
  id              String       @id @default(cuid())
  userId          String
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  matchId         String
  match           Match        @relation(fields: [matchId], references: [id], onDelete: Cascade)
  marketId        String
  market          Market       @relation(fields: [marketId], references: [id], onDelete: Cascade)
  optionId        String
  option          MarketOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  points          Int          @default(0)
  status          PredictionStatus @default(ACTIVE)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([userId])
  @@index([matchId])
  @@index([marketId])
  @@index([optionId])
  @@index([status])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum MatchStatus {
  UPCOMING
  LIVE
  COMPLETED
  CANCELLED
}

enum MarketType {
  MATCH_WINNER
  HIGHEST_RUN_SCORER
  HIGHEST_WICKET_TAKER
  TWO_HUNDRED_RUNS_BARRIER
}

enum MarketStatus {
  ACTIVE
  SUSPENDED
  SETTLED
  CANCELLED
}

enum PredictionStatus {
  ACTIVE
  SETTLED
  CANCELLED
}

enum PlayerRole {
  BATSMAN
  BOWLER
  ALL_ROUNDER
  WICKET_KEEPER
}
